# --- üì¶ –ò–º–ø–æ—Ä—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ ---
import tkinter as tk
from tkinter import filedialog, messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np
import librosa
import librosa.display
import simpleaudio as sa
import soundfile as sf
import os
import pandas as pd

# --- üîß –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
from ui_noise import apply_noise_filter
from ui_normalize import apply_normalization
from ui_trim import apply_trim_silence
from ui_phoneme_analysis import PhonemeAnalyzer
from ui_slice_filter import apply_marker_zeroing_filter
from ui_latent_free import smooth_signal, compute_threshold
import ui_latent_free
import ui_latent_experiment


# --- üß† –ö–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å GUI ---
class AudioApp:
    def __init__(self, root):
        self.root = root
        self.root.title("–ê—É–¥–∏–æ –û–±—Ä–∞–±–æ—Ç—á–∏–∫")
        self.root.geometry("1300x1000")

        self.audio_data = None
        self.original_audio_data = None
        self.sr = None
        self.filepath = ""
        self.current_segments = None
        self.phoneme_table = None

        # --- üìå –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å–ª–µ–≤–∞ ---
        self.left_panel = tk.Frame(root, bg="black", width=200)
        self.left_panel.pack(side="left", fill="y")

        self.flag1 = tk.BooleanVar()
        self.flag2 = tk.BooleanVar()
        self.flag3 = tk.BooleanVar()
        self.flag4 = tk.BooleanVar()
        self.flag5 = tk.BooleanVar()

        tk.Checkbutton(self.left_panel, text="–§–∏–ª—å—Ç—Ä —à—É–º–∞", variable=self.flag1,
                       bg="black", fg="white", selectcolor="gray20").pack(anchor="w")
        tk.Checkbutton(self.left_panel, text="–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è", variable=self.flag2,
                       bg="black", fg="white", selectcolor="gray20").pack(anchor="w")
        tk.Checkbutton(self.left_panel, text="–û–±—Ä–µ–∑–∫–∞ —Ç–∏—à–∏–Ω—ã", variable=self.flag3,
                       bg="black", fg="white", selectcolor="gray20").pack(anchor="w")
        tk.Checkbutton(self.left_panel, text="–§–æ–Ω–µ–º—ã ‚Üí –∑–∞–Ω—É–ª–µ–Ω–∏–µ –≤–Ω–µ", variable=self.flag4,
                       bg="black", fg="white", selectcolor="gray20").pack(anchor="w")
        tk.Checkbutton(self.left_panel, text=" –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã", variable=self.flag5,
                       bg="black", fg="white", selectcolor="gray20").pack(anchor="w")

        # --- üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞ ---
        tk.Label(self.left_panel, text="‚öô –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞", bg="black", fg="white").pack(anchor="w", pady=(10, 0))

        self.speed_factor = tk.DoubleVar(value=1.0)
        tk.Label(self.left_panel, text="–°–∫–æ—Ä–æ—Å—Ç—å", bg="black", fg="white").pack(anchor="w")
        tk.Scale(self.left_panel, from_=0.5, to=2.0, resolution=0.1, orient="horizontal",
                 variable=self.speed_factor, bg="black", fg="white").pack(fill="x")

        self.quantile = tk.DoubleVar(value=0.92)
        tk.Label(self.left_panel, text="–ö–≤–∞–Ω—Ç–∏–ª—å", bg="black", fg="white").pack(anchor="w")
        tk.Scale(self.left_panel, from_=0.5, to=0.99, resolution=0.01, orient="horizontal",
                 variable=self.quantile, bg="black", fg="white").pack(fill="x")

        self.merge_threshold = tk.DoubleVar(value=1.0)
        tk.Label(self.left_panel, text="–°–ª–∏—è–Ω–∏–µ (—Å–µ–∫)", bg="black", fg="white").pack(anchor="w")
        tk.Scale(self.left_panel, from_=0.1, to=3.0, resolution=0.1, orient="horizontal",
                 variable=self.merge_threshold, bg="black", fg="white").pack(fill="x")

        self.smooth_window = tk.IntVar(value=5)
        tk.Label(self.left_panel, text="–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ", bg="black", fg="white").pack(anchor="w")
        tk.Scale(self.left_panel, from_=1, to=21, resolution=2, orient="horizontal",
                 variable=self.smooth_window, bg="black", fg="white").pack(fill="x")

        # --- –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ ---
        tk.Label(self.left_panel, text="–¢–∏–ø —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞", bg="black", fg="white").pack(anchor="w", pady=(10, 0))
        self.experiment_type = tk.StringVar(value="—Å–≤–æ–±–æ–¥–Ω—ã–π")
        tk.OptionMenu(self.left_panel, self.experiment_type, "—Å–≤–æ–±–æ–¥–Ω—ã–π", "5:6").pack(fill="x")

        # --- üß∞ –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---
        self.controls_frame = tk.Frame(self.left_panel, bg="black")
        self.controls_frame.pack(side="bottom", pady=10)

        tk.Button(self.controls_frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª", command=self.load_audio).pack(fill="x", pady=2)
        tk.Button(self.controls_frame, text="‚ñ∂ –ü—Ä–æ—Å–ª—É—à–∞—Ç—å", command=self.play_audio).pack(fill="x", pady=2)
        tk.Button(self.controls_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_audio).pack(fill="x", pady=2)
        tk.Button(self.controls_frame, text="–û–ë–†–ê–ë–û–¢–ê–¢–¨", command=self.process_audio,
                  font=("Arial", 12), bg="white").pack(fill="x", pady=10)
        tk.Button(self.controls_frame, text="üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ—á–∏", command=self.analyze_audio).pack(fill="x", pady=5)
        tk.Button(self.controls_frame, text="üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á—ë—Ç", command=self.export_report).pack(fill="x", pady=5)

        # --- üìä –ì—Ä–∞—Ñ–∏–∫ ---
        self.graph_frame = tk.Frame(root, bg="orange")
        self.graph_frame.pack(side="left", fill="both", expand=True)

        self.canvas_container = tk.Canvas(self.graph_frame, bg="white")
        self.scroll_x = tk.Scrollbar(self.graph_frame, orient="horizontal", command=self.canvas_container.xview)
        self.scroll_y = tk.Scrollbar(self.graph_frame, orient="vertical", command=self.canvas_container.yview)
        self.canvas_container.configure(xscrollcommand=self.scroll_x.set, yscrollcommand=self.scroll_y.set)
        self.scroll_x.pack(side="bottom", fill="x")
        self.scroll_y.pack(side="right", fill="y")
        self.canvas_container.pack(side="left", fill="both", expand=True)

        self.canvas_frame = tk.Frame(self.canvas_container)
        self.canvas_container.create_window((0, 0), window=self.canvas_frame, anchor="nw")
        self.canvas_frame.bind("<Configure>", lambda e: self.canvas_container.configure(scrollregion=self.canvas_container.bbox("all")))

    def load_audio(self):
        self.filepath = filedialog.askopenfilename(filetypes=[("Audio Files", "*.wav *.mp3")])
        if self.filepath:
            self.original_audio_data, self.sr = librosa.load(self.filepath, sr=None)
            self.audio_data = self.original_audio_data.copy()
            self.current_segments = None
            self.draw_waveform()

    def draw_waveform(self, segments=None, threshold=None, series_lines=None):
        for widget in self.canvas_frame.winfo_children():
            widget.destroy()

        fig, ax = plt.subplots(figsize=(10, 3), dpi=100)

        if self.original_audio_data is not None:
            librosa.display.waveshow(self.original_audio_data, sr=self.sr, ax=ax,
                                     alpha=0.5, color='gray', label='–û—Ä–∏–≥–∏–Ω–∞–ª')
        if self.audio_data is not None:
            librosa.display.waveshow(self.audio_data, sr=self.sr, ax=ax,
                                     alpha=0.9, color='blue', label='–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π')

        segments_to_draw = segments if segments is not None else self.current_segments
        if segments_to_draw:
            for start, end in segments_to_draw:
                ax.axvline(x=start, color='green', linestyle='--')
                ax.axvline(x=end, color='red', linestyle='--')
                ax.axvspan(start, end, color='green', alpha=0.2)

        if threshold:
            ax.axhline(y=threshold, color='purple', linestyle='--', label='–ü–æ—Ä–æ–≥')

        if series_lines:
            for x in series_lines:
                ax.axvline(x=x, color='purple', linestyle='-.', linewidth=2)

        ax.set_title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ—Å–∏–≥–Ω–∞–ª–æ–≤")
        ax.legend(loc="upper right")

        canvas = FigureCanvasTkAgg(fig, master=self.canvas_frame)
        canvas.draw()
        canvas.get_tk_widget().pack()

    def process_audio(self):
        if self.original_audio_data is None:
            messagebox.showwarning("–ù–µ—Ç —Ñ–∞–π–ª–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
            return

        y = self.original_audio_data.copy()
        self.current_segments = None
        threshold = None
        series_lines = []

        if self.flag1.get():
            y = apply_noise_filter(y)
        if self.flag2.get():
            y = apply_normalization(y)
        if self.flag3.get():
            y = apply_trim_silence(y, self.sr)
        if self.flag4.get():
            markers = [1.5, 3.0, 6.2, 7.5]
            y = apply_marker_zeroing_filter(y, self.sr, markers, buffer=0.5)
        if self.flag5.get():
            speed = self.speed_factor.get()
            quantile = self.quantile.get()
            merge = self.merge_threshold.get()
            window = self.smooth_window.get()

            y = librosa.resample(y, orig_sr=self.sr, target_sr=int(self.sr * speed))
            self.sr = int(self.sr * speed)

            energy = np.abs(y)
            smoothed = smooth_signal(energy, window)
            threshold = compute_threshold(smoothed, quantile)

            if self.experiment_type.get() == "—Å–≤–æ–±–æ–¥–Ω—ã–π":
                segments = ui_latent_free.find_nonzero_segments(smoothed, self.sr, threshold, merge)
            else:
                try:
                    segments = ui_latent_experiment.find_nonzero_segments(smoothed, self.sr, threshold, merge)
                except ValueError as e:
                    messagebox.showerror("–û—à–∏–±–∫–∞", str(e))
                    return

                series_lines = [segments[i * 6][0] for i in range(1, 5)]

            self.current_segments = segments
            self.audio_data = y
            self.draw_waveform(segments=segments, threshold=threshold, series_lines=series_lines)

            text = "\n".join([f"{start:.2f} ‚Äì {end:.2f} —Å–µ–∫" for start, end in segments])
            messagebox.showinfo(" –≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã", f"–ù–∞–π–¥–µ–Ω–æ: {len(segments)}\n\n{text}")
            messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return

        self.audio_data = y
        self.draw_waveform()
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

    def play_audio(self):
        if self.audio_data is not None:
            audio = (self.audio_data * 32767).astype(np.int16)
            sa.play_buffer(audio, 1, 2, self.sr)

    def save_audio(self):
        if self.audio_data is not None:
            out_path = filedialog.asksaveasfilename(defaultextension=".wav", filetypes=[("WAV", "*.wav")])
            if out_path:
                sf.write(out_path, self.audio_data, self.sr)
                messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {os.path.basename(out_path)}")

    def analyze_audio(self):
        if self.audio_data is not None:
            analyzer = PhonemeAnalyzer(self.root, self.audio_data, self.sr)
            analyzer.analyze()
            self.phoneme_table = analyzer.get_phoneme_dataframe()
        else:
            messagebox.showwarning("–ù–µ—Ç –∞—É–¥–∏–æ", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª.")

    def export_report(self):
        if not self.current_segments:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ —Å –ø–æ–∏—Å–∫–æ–º –ª–∞—Ç–µ–Ω—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤.")
            return

        save_path = filedialog.asksaveasfilename(defaultextension=".xlsx", filetypes=[("Excel", "*.xlsx")])
        if not save_path:
            return

        # --- üìë 1. –õ–∞—Ç–µ–Ω—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã ---
        df_segments = pd.DataFrame([{
            "–ù–∞—á–∞–ª–æ (—Å–µ–∫)": start,
            "–ö–æ–Ω–µ—Ü (—Å–µ–∫)": end,
            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)": end - start
        } for start, end in self.current_segments])

        # --- üìä 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª–∞—Ç–µ–Ω—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ ---
        stats = df_segments["–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)"].describe().rename("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        df_stats = pd.DataFrame(stats)

        # --- ‚öô 3. –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ ---
        signal_metrics = {
            "–ò–º—è —Ñ–∞–π–ª–∞": [os.path.basename(self.filepath)],
            "–ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏": [self.sr],
            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)": [len(self.audio_data) / self.sr],
            "–°—Ä–µ–¥–Ω—è—è –º–æ—â–Ω–æ—Å—Ç—å": [np.mean(self.audio_data**2)],
            "–°–∫–æ—Ä–æ—Å—Ç—å": [self.speed_factor.get()],
            "–ö–≤–∞–Ω—Ç–∏–ª—å": [self.quantile.get()],
            "–ü–æ—Ä–æ–≥ —Å–ª–∏—è–Ω–∏—è": [self.merge_threshold.get()],
            "–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ": [self.smooth_window.get()],
            "–¢–∏–ø —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞": [self.experiment_type.get()]
        }
        df_metrics = pd.DataFrame(signal_metrics)

        # --- üß† 4. –§–æ–Ω–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ---
        if self.phoneme_table is not None and not self.phoneme_table.empty:
            df_phonemes = self.phoneme_table.copy()
        else:
            df_phonemes = pd.DataFrame([{"–°–æ–æ–±—â–µ–Ω–∏–µ": "–§–æ–Ω–µ–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª—Å—è –∏–ª–∏ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."}])

        # --- üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –≤ Excel ---
        try:
            with pd.ExcelWriter(save_path) as writer:
                df_metrics.to_excel(writer, sheet_name="–û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏", index=False)
                df_segments.to_excel(writer, sheet_name="–õ–∞—Ç–µ–Ω—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã", index=False)
                df_stats.to_excel(writer, sheet_name="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
                df_phonemes.to_excel(writer, sheet_name="–§–æ–Ω–µ–º—ã", index=False)

            messagebox.showinfo("–û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: {os.path.basename(save_path)}")
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", str(e))



# --- üöÄ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    root = tk.Tk()
    app = AudioApp(root)
    root.mainloop()
